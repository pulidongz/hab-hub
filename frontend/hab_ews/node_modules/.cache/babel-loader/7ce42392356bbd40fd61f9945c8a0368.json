{"ast":null,"code":"import _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/pul/hab_ews/frontend/hab_ews/src/MapLayer.js\";\nimport React, { Fragment } from 'react';\nimport { LeafletProvider } from './context';\nimport MapComponent from './MapComponent';\n\nvar MapLayer =\n/*#__PURE__*/\nfunction (_MapComponent) {\n  _inherits(MapLayer, _MapComponent);\n\n  function MapLayer(props) {\n    var _this;\n\n    _classCallCheck(this, MapLayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapLayer).call(this, props));\n    _this.leafletElement = _this.createLeafletElement(props);\n    return _this;\n  }\n\n  _createClass(MapLayer, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(_props) {\n      throw new Error('createLeafletElement() must be implemented');\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(_fromProps, _toProps) {}\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _get(_getPrototypeOf(MapLayer.prototype), \"componentDidMount\", this).call(this);\n\n      this.layerContainer.addLayer(this.leafletElement);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      _get(_getPrototypeOf(MapLayer.prototype), \"componentDidUpdate\", this).call(this, prevProps);\n\n      if (this.props.attribution !== prevProps.attribution) {\n        var map = this.props.leaflet.map;\n\n        if (map != null && map.attributionControl != null) {\n          map.attributionControl.removeAttribution(prevProps.attribution);\n          map.attributionControl.addAttribution(this.props.attribution);\n        }\n      }\n\n      this.updateLeafletElement(prevProps, this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      _get(_getPrototypeOf(MapLayer.prototype), \"componentWillUnmount\", this).call(this);\n\n      this.layerContainer.removeLayer(this.leafletElement);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n\n      if (children == null) {\n        return null;\n      }\n\n      return this.contextValue == null ? React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, children) : React.createElement(LeafletProvider, {\n        value: this.contextValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, children);\n    }\n  }, {\n    key: \"layerContainer\",\n    get: function get() {\n      return this.props.leaflet.layerContainer || this.props.leaflet.map;\n    }\n  }]);\n\n  return MapLayer;\n}(MapComponent);\n\nexport { MapLayer as default };","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/MapLayer.js"],"names":["React","Fragment","LeafletProvider","MapComponent","MapLayer","props","leafletElement","createLeafletElement","_props","Error","_fromProps","_toProps","layerContainer","addLayer","prevProps","attribution","map","leaflet","attributionControl","removeAttribution","addAttribution","updateLeafletElement","removeLayer","children","contextValue"],"mappings":";;;;;;;AAGA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAGqBC,Q;;;;;AAOnB,oBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,kFAAMA,KAAN;AACA,UAAKC,cAAL,GAAsB,MAAKC,oBAAL,CAA0BF,KAA1B,CAAtB;AAFwB;AAGzB;;;;yCAMoBG,M,EAA+B;AAClD,YAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;;yCAEoBC,U,EAAmBC,Q,EAAiB,CAAE;;;wCAEvC;AAClB;;AACA,WAAKC,cAAL,CAAoBC,QAApB,CAA6B,KAAKP,cAAlC;AACD;;;uCAEkBQ,S,EAAkB;AACnC,uFAAyBA,SAAzB;;AAEA,UAAI,KAAKT,KAAL,CAAWU,WAAX,KAA2BD,SAAS,CAACC,WAAzC,EAAsD;AAAA,YAC5CC,GAD4C,GACpC,KAAKX,KAAL,CAAWY,OADyB,CAC5CD,GAD4C;;AAEpD,YAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,CAACE,kBAAJ,IAA0B,IAA7C,EAAmD;AACjDF,UAAAA,GAAG,CAACE,kBAAJ,CAAuBC,iBAAvB,CAAyCL,SAAS,CAACC,WAAnD;AACAC,UAAAA,GAAG,CAACE,kBAAJ,CAAuBE,cAAvB,CAAsC,KAAKf,KAAL,CAAWU,WAAjD;AACD;AACF;;AAED,WAAKM,oBAAL,CAA0BP,SAA1B,EAAqC,KAAKT,KAA1C;AACD;;;2CAEsB;AACrB;;AACA,WAAKO,cAAL,CAAoBU,WAApB,CAAgC,KAAKhB,cAArC;AACD;;;6BAEQ;AAAA,UACCiB,QADD,GACc,KAAKlB,KADnB,CACCkB,QADD;;AAEP,UAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,eAAO,IAAP;AACD;;AACD,aAAO,KAAKC,YAAL,IAAqB,IAArB,GACL,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAWD,QAAX,CADK,GAGL,oBAAC,eAAD;AAAiB,QAAA,KAAK,EAAE,KAAKC,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4CD,QAA5C,CAHF;AAKD;;;wBA5C2B;AAC1B,aAAO,KAAKlB,KAAL,CAAWY,OAAX,CAAmBL,cAAnB,IAAqC,KAAKP,KAAL,CAAWY,OAAX,CAAmBD,GAA/D;AACD;;;;EAXOb,Y;;SAHWC,Q","sourcesContent":["// @flow\n\nimport type { Layer } from 'leaflet'\nimport React, { Fragment } from 'react'\n\nimport { LeafletProvider } from './context'\nimport MapComponent from './MapComponent'\nimport type { LeafletContext, MapLayerProps } from './types'\n\nexport default class MapLayer<\n  LeafletElement: Layer,\n  Props: MapLayerProps,\n> extends MapComponent<LeafletElement, Props> {\n  contextValue: ?LeafletContext\n  leafletElement: LeafletElement\n\n  constructor(props: Props) {\n    super(props)\n    this.leafletElement = this.createLeafletElement(props)\n  }\n\n  get layerContainer(): Layer {\n    return this.props.leaflet.layerContainer || this.props.leaflet.map\n  }\n\n  createLeafletElement(_props: Props): LeafletElement {\n    throw new Error('createLeafletElement() must be implemented')\n  }\n\n  updateLeafletElement(_fromProps: Props, _toProps: Props) {}\n\n  componentDidMount() {\n    super.componentDidMount()\n    this.layerContainer.addLayer(this.leafletElement)\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    super.componentDidUpdate(prevProps)\n\n    if (this.props.attribution !== prevProps.attribution) {\n      const { map } = this.props.leaflet\n      if (map != null && map.attributionControl != null) {\n        map.attributionControl.removeAttribution(prevProps.attribution)\n        map.attributionControl.addAttribution(this.props.attribution)\n      }\n    }\n\n    this.updateLeafletElement(prevProps, this.props)\n  }\n\n  componentWillUnmount() {\n    super.componentWillUnmount()\n    this.layerContainer.removeLayer(this.leafletElement)\n  }\n\n  render() {\n    const { children } = this.props\n    if (children == null) {\n      return null\n    }\n    return this.contextValue == null ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <LeafletProvider value={this.contextValue}>{children}</LeafletProvider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}