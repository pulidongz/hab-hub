{"ast":null,"code":"import _objectSpread from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { withLeaflet } from './context';\nimport DivOverlay from './DivOverlay';\n\nvar Popup =\n/*#__PURE__*/\nfunction (_DivOverlay) {\n  _inherits(Popup, _DivOverlay);\n\n  function Popup() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Popup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Popup)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onPopupOpen = function (_ref) {\n      var popup = _ref.popup;\n\n      if (popup === _this.leafletElement) {\n        _this.onOpen();\n      }\n    };\n\n    _this.onPopupClose = function (_ref2) {\n      var popup = _ref2.popup;\n\n      if (popup === _this.leafletElement) {\n        _this.onClose();\n      }\n    };\n\n    _this.onRender = function () {\n      if (_this.props.autoPan !== false && _this.leafletElement.isOpen()) {\n        if (_this.leafletElement._map && _this.leafletElement._map._panAnim) {\n          _this.leafletElement._map._panAnim = undefined;\n        }\n\n        _this.leafletElement._adjustPan();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Popup, [{\n    key: \"getOptions\",\n    value: function getOptions(props) {\n      return _objectSpread({}, _get(_getPrototypeOf(Popup.prototype), \"getOptions\", this).call(this, props), {\n        autoPan: false\n      });\n    }\n  }, {\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      var options = this.getOptions(props);\n      options.autoPan = props.autoPan !== false;\n      return new LeafletPopup(options, props.leaflet.popupContainer);\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(fromProps, toProps) {\n      if (toProps.position !== fromProps.position) {\n        this.leafletElement.setLatLng(toProps.position);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var position = this.props.position;\n      var _this$props$leaflet = this.props.leaflet,\n          map = _this$props$leaflet.map,\n          popupContainer = _this$props$leaflet.popupContainer;\n      var el = this.leafletElement;\n\n      if (map != null) {\n        map.on({\n          popupopen: this.onPopupOpen,\n          popupclose: this.onPopupClose\n        });\n      }\n\n      if (popupContainer) {\n        // Attach to container component\n        popupContainer.bindPopup(el);\n      } else {\n        // Attach to a Map\n        if (position) {\n          el.setLatLng(position);\n        }\n\n        el.openOn(map);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var map = this.props.leaflet.map;\n\n      if (map != null) {\n        map.off({\n          popupopen: this.onPopupOpen,\n          popupclose: this.onPopupClose\n        });\n        map.removeLayer(this.leafletElement);\n      }\n\n      _get(_getPrototypeOf(Popup.prototype), \"componentWillUnmount\", this).call(this);\n    }\n  }]);\n\n  return Popup;\n}(DivOverlay);\n\nPopup.defaultProps = {\n  pane: 'popupPane'\n};\nexport default withLeaflet(Popup);","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/leaflet/src/Popup.js"],"names":["Popup","LeafletPopup","withLeaflet","DivOverlay","onPopupOpen","popup","leafletElement","onOpen","onPopupClose","onClose","onRender","props","autoPan","isOpen","_map","_panAnim","undefined","_adjustPan","options","getOptions","leaflet","popupContainer","fromProps","toProps","position","setLatLng","map","el","on","popupopen","popupclose","bindPopup","openOn","off","removeLayer","defaultProps","pane"],"mappings":"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","sourcesContent":["// @flow\n\nimport { Popup as LeafletPopup } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport DivOverlay from './DivOverlay'\nimport type { LatLng, DivOverlayProps } from './types'\n\ntype LeafletElement = LeafletPopup\ntype Props = {\n  autoPan?: boolean,\n  position?: LatLng,\n} & DivOverlayProps\n\nclass Popup extends DivOverlay<LeafletElement, Props> {\n  static defaultProps = {\n    pane: 'popupPane',\n  }\n\n  getOptions(props: Props): Props {\n    return {\n      ...super.getOptions(props),\n      autoPan: false,\n    }\n  }\n\n  createLeafletElement(props: Props): LeafletElement {\n    const options = this.getOptions(props)\n    options.autoPan = props.autoPan !== false\n    return new LeafletPopup(options, props.leaflet.popupContainer)\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setLatLng(toProps.position)\n    }\n  }\n\n  componentDidMount() {\n    const { position } = this.props\n    const { map, popupContainer } = this.props.leaflet\n    const el = this.leafletElement\n\n    if (map != null) {\n      map.on({\n        popupopen: this.onPopupOpen,\n        popupclose: this.onPopupClose,\n      })\n    }\n\n    if (popupContainer) {\n      // Attach to container component\n      popupContainer.bindPopup(el)\n    } else {\n      // Attach to a Map\n      if (position) {\n        el.setLatLng(position)\n      }\n      el.openOn(map)\n    }\n  }\n\n  componentWillUnmount() {\n    const { map } = this.props.leaflet\n\n    if (map != null) {\n      map.off({\n        popupopen: this.onPopupOpen,\n        popupclose: this.onPopupClose,\n      })\n      map.removeLayer(this.leafletElement)\n    }\n\n    super.componentWillUnmount()\n  }\n\n  onPopupOpen = ({ popup }: { popup: LeafletElement }) => {\n    if (popup === this.leafletElement) {\n      this.onOpen()\n    }\n  }\n\n  onPopupClose = ({ popup }: { popup: LeafletElement }) => {\n    if (popup === this.leafletElement) {\n      this.onClose()\n    }\n  }\n\n  onRender = () => {\n    if (this.props.autoPan !== false && this.leafletElement.isOpen()) {\n      if (this.leafletElement._map && this.leafletElement._map._panAnim) {\n        this.leafletElement._map._panAnim = undefined\n      }\n      this.leafletElement._adjustPan()\n    }\n  }\n}\n\nexport default withLeaflet<Props, Popup>(Popup)\n"]},"metadata":{},"sourceType":"module"}