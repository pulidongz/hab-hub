{"ast":null,"code":"import _objectSpread from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { GridLayer as LeafletGridLayer } from 'leaflet';\nimport MapLayer from './MapLayer';\n\nvar GridLayer =\n/*#__PURE__*/\nfunction (_MapLayer) {\n  _inherits(GridLayer, _MapLayer);\n\n  function GridLayer() {\n    _classCallCheck(this, GridLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridLayer).apply(this, arguments));\n  }\n\n  _createClass(GridLayer, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      return new LeafletGridLayer(this.getOptions(props));\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(fromProps, toProps) {\n      var opacity = toProps.opacity,\n          zIndex = toProps.zIndex;\n\n      if (opacity !== fromProps.opacity) {\n        this.leafletElement.setOpacity(opacity);\n      }\n\n      if (zIndex !== fromProps.zIndex) {\n        this.leafletElement.setZIndex(zIndex);\n      }\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions(props) {\n      var options = _get(_getPrototypeOf(GridLayer.prototype), \"getOptions\", this).call(this, props);\n\n      return props.leaflet.map == null ? options : // $FlowFixMe: object spread type\n      _objectSpread({\n        maxZoom: props.leaflet.map.options.maxZoom,\n        minZoom: props.leaflet.map.options.minZoom\n      }, options);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return GridLayer;\n}(MapLayer);\n\nexport { GridLayer as default };","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/GridLayer.js"],"names":["GridLayer","LeafletGridLayer","MapLayer","props","getOptions","fromProps","toProps","opacity","zIndex","leafletElement","setOpacity","setZIndex","options","leaflet","map","maxZoom","minZoom"],"mappings":";;;;;;;AAEA,SAASA,SAAS,IAAIC,gBAAtB,QAA8C,SAA9C;AAEA,OAAOC,QAAP,MAAqB,YAArB;;IAGqBF,S;;;;;;;;;;;;;yCAIEG,K,EAA8B;AACjD,aAAO,IAAIF,gBAAJ,CAAqB,KAAKG,UAAL,CAAgBD,KAAhB,CAArB,CAAP;AACD;;;yCAEoBE,S,EAAkBC,O,EAAgB;AAAA,UAC7CC,OAD6C,GACzBD,OADyB,CAC7CC,OAD6C;AAAA,UACpCC,MADoC,GACzBF,OADyB,CACpCE,MADoC;;AAErD,UAAID,OAAO,KAAKF,SAAS,CAACE,OAA1B,EAAmC;AACjC,aAAKE,cAAL,CAAoBC,UAApB,CAA+BH,OAA/B;AACD;;AACD,UAAIC,MAAM,KAAKH,SAAS,CAACG,MAAzB,EAAiC;AAC/B,aAAKC,cAAL,CAAoBE,SAApB,CAA8BH,MAA9B;AACD;AACF;;;+BAEUL,K,EAAqB;AAC9B,UAAMS,OAAO,6EAAoBT,KAApB,CAAb;;AACA,aAAOA,KAAK,CAACU,OAAN,CAAcC,GAAd,IAAqB,IAArB,GACHF,OADG,GAEH;AAFG;AAIDG,QAAAA,OAAO,EAAEZ,KAAK,CAACU,OAAN,CAAcC,GAAd,CAAkBF,OAAlB,CAA0BG,OAJlC;AAKDC,QAAAA,OAAO,EAAEb,KAAK,CAACU,OAAN,CAAcC,GAAd,CAAkBF,OAAlB,CAA0BI;AALlC,SAMEJ,OANF,CAAP;AAQD;;;6BAEQ;AACP,aAAO,IAAP;AACD;;;;EA7BOV,Q;;SAHWF,S","sourcesContent":["// @flow\n\nimport { GridLayer as LeafletGridLayer } from 'leaflet'\n\nimport MapLayer from './MapLayer'\nimport type { GridLayerProps } from './types'\n\nexport default class GridLayer<\n  LeafletElement: LeafletGridLayer,\n  Props: GridLayerProps,\n> extends MapLayer<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    return new LeafletGridLayer(this.getOptions(props))\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    const { opacity, zIndex } = toProps\n    if (opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(opacity)\n    }\n    if (zIndex !== fromProps.zIndex) {\n      this.leafletElement.setZIndex(zIndex)\n    }\n  }\n\n  getOptions(props: Props): Props {\n    const options = super.getOptions(props)\n    return props.leaflet.map == null\n      ? options\n      : // $FlowFixMe: object spread type\n        {\n          maxZoom: props.leaflet.map.options.maxZoom,\n          minZoom: props.leaflet.map.options.minZoom,\n          ...options,\n        }\n  }\n\n  render() {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}