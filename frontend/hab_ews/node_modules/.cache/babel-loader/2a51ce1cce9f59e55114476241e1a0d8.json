{"ast":null,"code":"import _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { GeoJSON as LeafletGeoJSON } from 'leaflet';\nimport { withLeaflet } from './context';\nimport Path from './Path';\n\nvar GeoJSON =\n/*#__PURE__*/\nfunction (_Path) {\n  _inherits(GeoJSON, _Path);\n\n  function GeoJSON() {\n    _classCallCheck(this, GeoJSON);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GeoJSON).apply(this, arguments));\n  }\n\n  _createClass(GeoJSON, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      return new LeafletGeoJSON(props.data, this.getOptions(props));\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(fromProps, toProps) {\n      if (typeof toProps.style === 'function') {\n        this.leafletElement.setStyle(toProps.style);\n      } else {\n        this.setStyleIfChanged(fromProps, toProps);\n      }\n    }\n  }]);\n\n  return GeoJSON;\n}(Path);\n\nexport default withLeaflet(GeoJSON);","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/leaflet/src/GeoJSON.js"],"names":["GeoJSON","LeafletGeoJSON","withLeaflet","Path","props","data","getOptions","fromProps","toProps","style","leafletElement","setStyle","setStyleIfChanged"],"mappings":";;;;;AAEA,SAASA,OAAO,IAAIC,cAApB,QAAmE,SAAnE;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAgBMH,O;;;;;;;;;;;;;yCACiBI,K,EAA8B;AACjD,aAAO,IAAIH,cAAJ,CAAmBG,KAAK,CAACC,IAAzB,EAA+B,KAAKC,UAAL,CAAgBF,KAAhB,CAA/B,CAAP;AACD;;;yCAEoBG,S,EAAkBC,O,EAAgB;AACrD,UAAI,OAAOA,OAAO,CAACC,KAAf,KAAyB,UAA7B,EAAyC;AACvC,aAAKC,cAAL,CAAoBC,QAApB,CAA6BH,OAAO,CAACC,KAArC;AACD,OAFD,MAEO;AACL,aAAKG,iBAAL,CAAuBL,SAAvB,EAAkCC,OAAlC;AACD;AACF;;;;EAXmBL,I;;AActB,eAAeD,WAAW,CAAiBF,OAAjB,CAA1B","sourcesContent":["// @flow\n\nimport { GeoJSON as LeafletGeoJSON, type LatLng, type Layer } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport Path from './Path'\nimport type { PathProps } from './types'\n\ntype LeafletElement = LeafletGeoJSON\n\ntype GeoJSONdata = Object | Array<any>\n\ntype Props = {\n  data: GeoJSONdata,\n  pointToLayer?: (point: GeoJSONdata, latlng: LatLng) => Layer,\n  style?: (feature: GeoJSONdata) => Object,\n  onEachFeature?: (feature: GeoJSONdata, layer: Layer) => void,\n  filter?: (feature: GeoJSONdata) => boolean,\n  coordsToLatLng?: (coords: GeoJSONdata) => LatLng,\n} & PathProps\n\nclass GeoJSON extends Path<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    return new LeafletGeoJSON(props.data, this.getOptions(props))\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (typeof toProps.style === 'function') {\n      this.leafletElement.setStyle(toProps.style)\n    } else {\n      this.setStyleIfChanged(fromProps, toProps)\n    }\n  }\n}\n\nexport default withLeaflet<Props, GeoJSON>(GeoJSON)\n"]},"metadata":{},"sourceType":"module"}