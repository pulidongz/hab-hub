{"ast":null,"code":"import _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Control } from 'leaflet';\nimport { Component } from 'react';\n\nvar MapControl =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapControl, _Component);\n\n  function MapControl(props) {\n    var _this;\n\n    _classCallCheck(this, MapControl);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapControl).call(this, props));\n    _this.leafletElement = _this.createLeafletElement(_this.props);\n    return _this;\n  }\n\n  _createClass(MapControl, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(_props) {\n      throw new Error('createLeafletElement() must be implemented');\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(fromProps, toProps) {\n      if (toProps.position !== fromProps.position) {\n        this.leafletElement.setPosition(toProps.position);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.leafletElement.addTo(this.props.leaflet.map);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.updateLeafletElement(prevProps, this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.leafletElement.remove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return MapControl;\n}(Component);\n\nexport { MapControl as default };","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/MapControl.js"],"names":["Control","Component","MapControl","props","leafletElement","createLeafletElement","_props","Error","fromProps","toProps","position","setPosition","addTo","leaflet","map","prevProps","updateLeafletElement","remove"],"mappings":";;;;;AAEA,SAASA,OAAT,QAAwB,SAAxB;AACA,SAASC,SAAT,QAA0B,OAA1B;;IAIqBC,U;;;;;AAMnB,sBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,oFAAMA,KAAN;AACA,UAAKC,cAAL,GAAsB,MAAKC,oBAAL,CAA0B,MAAKF,KAA/B,CAAtB;AAFwB;AAGzB;;;;yCAEoBG,M,EAA+B;AAClD,YAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;;yCAEoBC,S,EAAkBC,O,EAAsB;AAC3D,UAAIA,OAAO,CAACC,QAAR,KAAqBF,SAAS,CAACE,QAAnC,EAA6C;AAC3C,aAAKN,cAAL,CAAoBO,WAApB,CAAgCF,OAAO,CAACC,QAAxC;AACD;AACF;;;wCAEmB;AAClB,WAAKN,cAAL,CAAoBQ,KAApB,CAA0B,KAAKT,KAAL,CAAWU,OAAX,CAAmBC,GAA7C;AACD;;;uCAEkBC,S,EAAkB;AACnC,WAAKC,oBAAL,CAA0BD,SAA1B,EAAqC,KAAKZ,KAA1C;AACD;;;2CAEsB;AACrB,WAAKC,cAAL,CAAoBa,MAApB;AACD;;;6BAEW;AACV,aAAO,IAAP;AACD;;;;EAhCOhB,S;;SAHWC,U","sourcesContent":["// @flow\n\nimport { Control } from 'leaflet'\nimport { Component } from 'react'\n\nimport type { MapControlProps } from './types'\n\nexport default class MapControl<\n  LeafletElement: Control,\n  Props: MapControlProps,\n> extends Component<Props> {\n  leafletElement: LeafletElement\n\n  constructor(props: Props) {\n    super(props)\n    this.leafletElement = this.createLeafletElement(this.props)\n  }\n\n  createLeafletElement(_props: Props): LeafletElement {\n    throw new Error('createLeafletElement() must be implemented')\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props): void {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setPosition(toProps.position)\n    }\n  }\n\n  componentDidMount() {\n    this.leafletElement.addTo(this.props.leaflet.map)\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    this.updateLeafletElement(prevProps, this.props)\n  }\n\n  componentWillUnmount() {\n    this.leafletElement.remove()\n  }\n\n  render(): * {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}