{"ast":null,"code":"import _objectSpread from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport isEqual from 'fast-deep-equal';\nimport MapLayer from './MapLayer';\nimport pick from './utils/pick';\nvar OPTIONS = ['stroke', 'color', 'weight', 'opacity', 'lineCap', 'lineJoin', 'dashArray', 'dashOffset', 'fill', 'fillColor', 'fillOpacity', 'fillRule', 'bubblingMouseEvents', 'renderer', 'className', // Interactive Layer\n'interactive', // Layer\n'pane', 'attribution'];\n\nvar Path =\n/*#__PURE__*/\nfunction (_MapLayer) {\n  _inherits(Path, _MapLayer);\n\n  function Path(props) {\n    var _this;\n\n    _classCallCheck(this, Path);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Path).call(this, props));\n\n    if (_this.contextValue == null) {\n      _this.contextValue = _objectSpread({}, props.leaflet, {\n        popupContainer: _this.leafletElement\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(Path, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      _get(_getPrototypeOf(Path.prototype), \"componentDidUpdate\", this).call(this, prevProps);\n\n      this.setStyleIfChanged(prevProps, this.props);\n    }\n  }, {\n    key: \"getPathOptions\",\n    value: function getPathOptions(props) {\n      return pick(props, OPTIONS);\n    }\n  }, {\n    key: \"setStyle\",\n    value: function setStyle() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.leafletElement.setStyle(options);\n    }\n  }, {\n    key: \"setStyleIfChanged\",\n    value: function setStyleIfChanged(fromProps, toProps) {\n      var nextStyle = this.getPathOptions(toProps);\n\n      if (!isEqual(nextStyle, this.getPathOptions(fromProps))) {\n        this.setStyle(nextStyle);\n      }\n    }\n  }]);\n\n  return Path;\n}(MapLayer);\n\nexport { Path as default };","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/Path.js"],"names":["isEqual","MapLayer","pick","OPTIONS","Path","props","contextValue","leaflet","popupContainer","leafletElement","prevProps","setStyleIfChanged","options","setStyle","fromProps","toProps","nextStyle","getPathOptions"],"mappings":";;;;;;;AAGA,OAAOA,OAAP,MAAoB,iBAApB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AAEA,IAAMC,OAAO,GAAG,CACd,QADc,EAEd,OAFc,EAGd,QAHc,EAId,SAJc,EAKd,SALc,EAMd,UANc,EAOd,WAPc,EAQd,YARc,EASd,MATc,EAUd,WAVc,EAWd,aAXc,EAYd,UAZc,EAad,qBAbc,EAcd,UAdc,EAed,WAfc,EAgBd;AACA,aAjBc,EAkBd;AACA,MAnBc,EAoBd,aApBc,CAAhB;;IAuBqBC,I;;;;;AAInB,gBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,8EAAMA,KAAN;;AACA,QAAI,MAAKC,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,YAAKA,YAAL,qBACKD,KAAK,CAACE,OADX;AAEEC,QAAAA,cAAc,EAAE,MAAKC;AAFvB;AAID;;AAPuB;AAQzB;;;;uCAEkBC,S,EAAkB;AACnC,mFAAyBA,SAAzB;;AACA,WAAKC,iBAAL,CAAuBD,SAAvB,EAAkC,KAAKL,KAAvC;AACD;;;mCAEcA,K,EAA2B;AACxC,aAAOH,IAAI,CAACG,KAAD,EAAQF,OAAR,CAAX;AACD;;;+BAEmC;AAAA,UAA3BS,OAA2B,uEAAJ,EAAI;AAClC,WAAKH,cAAL,CAAoBI,QAApB,CAA6BD,OAA7B;AACD;;;sCAEiBE,S,EAAkBC,O,EAAgB;AAClD,UAAMC,SAAS,GAAG,KAAKC,cAAL,CAAoBF,OAApB,CAAlB;;AACA,UAAI,CAACf,OAAO,CAACgB,SAAD,EAAY,KAAKC,cAAL,CAAoBH,SAApB,CAAZ,CAAZ,EAAyD;AACvD,aAAKD,QAAL,CAAcG,SAAd;AACD;AACF;;;;EA7BOf,Q;;SAHWG,I","sourcesContent":["// @flow\n\nimport type { Path as PathType } from 'leaflet'\nimport isEqual from 'fast-deep-equal'\n\nimport MapLayer from './MapLayer'\nimport type { PathOptions, PathProps } from './types'\nimport pick from './utils/pick'\n\nconst OPTIONS = [\n  'stroke',\n  'color',\n  'weight',\n  'opacity',\n  'lineCap',\n  'lineJoin',\n  'dashArray',\n  'dashOffset',\n  'fill',\n  'fillColor',\n  'fillOpacity',\n  'fillRule',\n  'bubblingMouseEvents',\n  'renderer',\n  'className',\n  // Interactive Layer\n  'interactive',\n  // Layer\n  'pane',\n  'attribution',\n]\n\nexport default class Path<\n  LeafletElement: PathType,\n  Props: PathProps,\n> extends MapLayer<LeafletElement, Props> {\n  constructor(props: Props) {\n    super(props)\n    if (this.contextValue == null) {\n      this.contextValue = {\n        ...props.leaflet,\n        popupContainer: this.leafletElement,\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    super.componentDidUpdate(prevProps)\n    this.setStyleIfChanged(prevProps, this.props)\n  }\n\n  getPathOptions(props: Props): PathOptions {\n    return pick(props, OPTIONS)\n  }\n\n  setStyle(options: PathOptions = {}) {\n    this.leafletElement.setStyle(options)\n  }\n\n  setStyleIfChanged(fromProps: Props, toProps: Props) {\n    const nextStyle = this.getPathOptions(toProps)\n    if (!isEqual(nextStyle, this.getPathOptions(fromProps))) {\n      this.setStyle(nextStyle)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}