{"ast":null,"code":"import _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Polyline as LeafletPolyline } from 'leaflet';\nimport { withLeaflet } from './context';\nimport Path from './Path';\n\nvar Polyline =\n/*#__PURE__*/\nfunction (_Path) {\n  _inherits(Polyline, _Path);\n\n  function Polyline() {\n    _classCallCheck(this, Polyline);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Polyline).apply(this, arguments));\n  }\n\n  _createClass(Polyline, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      return new LeafletPolyline(props.positions, this.getOptions(props));\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(fromProps, toProps) {\n      if (toProps.positions !== fromProps.positions) {\n        this.leafletElement.setLatLngs(toProps.positions);\n      }\n\n      this.setStyleIfChanged(fromProps, toProps);\n    }\n  }]);\n\n  return Polyline;\n}(Path);\n\nexport default withLeaflet(Polyline);","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/leaflet/src/Polyline.js"],"names":["Polyline","LeafletPolyline","withLeaflet","Path","props","positions","getOptions","fromProps","toProps","leafletElement","setLatLngs","setStyleIfChanged"],"mappings":";;;;;AAEA,SAASA,QAAQ,IAAIC,eAArB,QAA4C,SAA5C;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAQMH,Q;;;;;;;;;;;;;yCACiBI,K,EAA8B;AACjD,aAAO,IAAIH,eAAJ,CAAoBG,KAAK,CAACC,SAA1B,EAAqC,KAAKC,UAAL,CAAgBF,KAAhB,CAArC,CAAP;AACD;;;yCAEoBG,S,EAAkBC,O,EAAgB;AACrD,UAAIA,OAAO,CAACH,SAAR,KAAsBE,SAAS,CAACF,SAApC,EAA+C;AAC7C,aAAKI,cAAL,CAAoBC,UAApB,CAA+BF,OAAO,CAACH,SAAvC;AACD;;AACD,WAAKM,iBAAL,CAAuBJ,SAAvB,EAAkCC,OAAlC;AACD;;;;EAVoBL,I;;AAavB,eAAeD,WAAW,CAAkBF,QAAlB,CAA1B","sourcesContent":["// @flow\n\nimport { Polyline as LeafletPolyline } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport Path from './Path'\nimport type { LatLng, PathProps } from './types'\n\ntype LeafletElement = LeafletPolyline\ntype Props = {\n  positions: LatLng[] | LatLng[][],\n} & PathProps\n\nclass Polyline extends Path<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    return new LeafletPolyline(props.positions, this.getOptions(props))\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.positions !== fromProps.positions) {\n      this.leafletElement.setLatLngs(toProps.positions)\n    }\n    this.setStyleIfChanged(fromProps, toProps)\n  }\n}\n\nexport default withLeaflet<Props, Polyline>(Polyline)\n"]},"metadata":{},"sourceType":"module"}