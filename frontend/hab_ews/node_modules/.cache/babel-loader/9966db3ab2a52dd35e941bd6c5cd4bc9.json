{"ast":null,"code":"import _objectSpread from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/pul/hab_ews/frontend/hab_ews/src/Marker.js\";\nimport { Marker as LeafletMarker } from 'leaflet';\nimport React from 'react';\nimport { LeafletProvider, withLeaflet } from './context';\nimport MapLayer from './MapLayer';\n\nvar Marker =\n/*#__PURE__*/\nfunction (_MapLayer) {\n  _inherits(Marker, _MapLayer);\n\n  function Marker() {\n    _classCallCheck(this, Marker);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Marker).apply(this, arguments));\n  }\n\n  _createClass(Marker, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      var el = new LeafletMarker(props.position, this.getOptions(props));\n      this.contextValue = _objectSpread({}, props.leaflet, {\n        popupContainer: el\n      });\n      return el;\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(fromProps, toProps) {\n      if (toProps.position !== fromProps.position) {\n        this.leafletElement.setLatLng(toProps.position);\n      }\n\n      if (toProps.icon !== fromProps.icon) {\n        this.leafletElement.setIcon(toProps.icon);\n      }\n\n      if (toProps.zIndexOffset !== fromProps.zIndexOffset) {\n        this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\n      }\n\n      if (toProps.opacity !== fromProps.opacity) {\n        this.leafletElement.setOpacity(toProps.opacity);\n      }\n\n      if (toProps.draggable !== fromProps.draggable) {\n        if (toProps.draggable === true) {\n          this.leafletElement.dragging.enable();\n        } else {\n          this.leafletElement.dragging.disable();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return children == null || this.contextValue == null ? null : React.createElement(LeafletProvider, {\n        value: this.contextValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, children);\n    }\n  }]);\n\n  return Marker;\n}(MapLayer);\n\nexport default withLeaflet(Marker);","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/Marker.js"],"names":["Marker","LeafletMarker","React","LeafletProvider","withLeaflet","MapLayer","props","el","position","getOptions","contextValue","leaflet","popupContainer","fromProps","toProps","leafletElement","setLatLng","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","draggable","dragging","enable","disable","children"],"mappings":";;;;;;;AAEA,SAAoBA,MAAM,IAAIC,aAA9B,QAAmD,SAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,WAA7C;AACA,OAAOC,QAAP,MAAqB,YAArB;;IAYML,M;;;;;;;;;;;;;yCACiBM,K,EAA8B;AACjD,UAAMC,EAAE,GAAG,IAAIN,aAAJ,CAAkBK,KAAK,CAACE,QAAxB,EAAkC,KAAKC,UAAL,CAAgBH,KAAhB,CAAlC,CAAX;AACA,WAAKI,YAAL,qBAAyBJ,KAAK,CAACK,OAA/B;AAAwCC,QAAAA,cAAc,EAAEL;AAAxD;AACA,aAAOA,EAAP;AACD;;;yCAEoBM,S,EAAkBC,O,EAAgB;AACrD,UAAIA,OAAO,CAACN,QAAR,KAAqBK,SAAS,CAACL,QAAnC,EAA6C;AAC3C,aAAKO,cAAL,CAAoBC,SAApB,CAA8BF,OAAO,CAACN,QAAtC;AACD;;AACD,UAAIM,OAAO,CAACG,IAAR,KAAiBJ,SAAS,CAACI,IAA/B,EAAqC;AACnC,aAAKF,cAAL,CAAoBG,OAApB,CAA4BJ,OAAO,CAACG,IAApC;AACD;;AACD,UAAIH,OAAO,CAACK,YAAR,KAAyBN,SAAS,CAACM,YAAvC,EAAqD;AACnD,aAAKJ,cAAL,CAAoBK,eAApB,CAAoCN,OAAO,CAACK,YAA5C;AACD;;AACD,UAAIL,OAAO,CAACO,OAAR,KAAoBR,SAAS,CAACQ,OAAlC,EAA2C;AACzC,aAAKN,cAAL,CAAoBO,UAApB,CAA+BR,OAAO,CAACO,OAAvC;AACD;;AACD,UAAIP,OAAO,CAACS,SAAR,KAAsBV,SAAS,CAACU,SAApC,EAA+C;AAC7C,YAAIT,OAAO,CAACS,SAAR,KAAsB,IAA1B,EAAgC;AAC9B,eAAKR,cAAL,CAAoBS,QAApB,CAA6BC,MAA7B;AACD,SAFD,MAEO;AACL,eAAKV,cAAL,CAAoBS,QAApB,CAA6BE,OAA7B;AACD;AACF;AACF;;;6BAEQ;AAAA,UACCC,QADD,GACc,KAAKrB,KADnB,CACCqB,QADD;AAEP,aAAOA,QAAQ,IAAI,IAAZ,IAAoB,KAAKjB,YAAL,IAAqB,IAAzC,GAAgD,IAAhD,GACL,oBAAC,eAAD;AAAiB,QAAA,KAAK,EAAE,KAAKA,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4CiB,QAA5C,CADF;AAGD;;;;EAlCkBtB,Q;;AAqCrB,eAAeD,WAAW,CAAgBJ,MAAhB,CAA1B","sourcesContent":["// @flow\n\nimport { type Icon, Marker as LeafletMarker } from 'leaflet'\nimport React from 'react'\n\nimport { LeafletProvider, withLeaflet } from './context'\nimport MapLayer from './MapLayer'\nimport type { LatLng, MapLayerProps } from './types'\n\ntype LeafletElement = LeafletMarker\ntype Props = {\n  icon?: Icon,\n  draggable?: boolean,\n  opacity?: number,\n  position: LatLng,\n  zIndexOffset?: number,\n} & MapLayerProps\n\nclass Marker extends MapLayer<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    const el = new LeafletMarker(props.position, this.getOptions(props))\n    this.contextValue = { ...props.leaflet, popupContainer: el }\n    return el\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setLatLng(toProps.position)\n    }\n    if (toProps.icon !== fromProps.icon) {\n      this.leafletElement.setIcon(toProps.icon)\n    }\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset) {\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset)\n    }\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity)\n    }\n    if (toProps.draggable !== fromProps.draggable) {\n      if (toProps.draggable === true) {\n        this.leafletElement.dragging.enable()\n      } else {\n        this.leafletElement.dragging.disable()\n      }\n    }\n  }\n\n  render() {\n    const { children } = this.props\n    return children == null || this.contextValue == null ? null : (\n      <LeafletProvider value={this.contextValue}>{children}</LeafletProvider>\n    )\n  }\n}\n\nexport default withLeaflet<Props, Marker>(Marker)\n"]},"metadata":{},"sourceType":"module"}