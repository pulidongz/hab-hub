{"ast":null,"code":"import _objectSpread from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/pul/hab_ews/frontend/hab_ews/src/leaflet/src/Pane.js\";\n// flowlint sketchy-null-string:off\nimport React, { Component } from 'react';\nimport warning from 'warning';\nimport { LeafletProvider, withLeaflet } from './context';\nimport { addClassName, removeClassName } from './utils/updateClassName';\nimport omit from './utils/omit';\nvar idCounter = 0;\n\nvar uniqueId = function uniqueId() {\n  return ++idCounter;\n};\n\nvar LEAFLET_PANES = ['tile', 'shadow', 'overlay', 'map', 'marker', 'tooltip', 'popup'];\nvar PANE_RE = /-*pane/gi;\n\nvar isLeafletPane = function isLeafletPane(name) {\n  return LEAFLET_PANES.indexOf(name.replace(PANE_RE, '')) !== -1;\n};\n\nvar paneStyles = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\n\nvar Pane =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Pane, _Component);\n\n  function Pane() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Pane);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Pane)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: undefined,\n      context: undefined\n    };\n\n    _this.setStyle = function () {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props,\n          style = _ref.style,\n          className = _ref.className;\n\n      var pane = _this.getPane(_this.state.name);\n\n      if (pane) {\n        if (className) {\n          addClassName(pane, className);\n        }\n\n        if (style) {\n          // Without the cast, Flow throws this error:\n          //   Cannot assign style[key] to pane.style[key] because string\n          //   is incompatible with number.\n          Object.keys(style).forEach(function (key) {\n            pane.style[key] = style[key];\n          });\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Pane, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createPane(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!this.state.name) {\n        // Do nothing if this.state.name is undefined due to errors or\n        // an invalid props.name value\n        return;\n      } // If the 'name' prop has changed the current pane is unmounted and a new\n      // pane is created.\n\n\n      if (this.props.name !== prevProps.name) {\n        this.removePane();\n        this.createPane(this.props);\n      } else {\n        // Remove the previous css class name from the pane if it has changed.\n        // setStyle() will take care of adding in the updated className\n        if (prevProps.className && this.props.className !== prevProps.className) {\n          var pane = this.getPane(this.state.name);\n\n          if (pane != null && prevProps.className != null) {\n            removeClassName(pane, prevProps.className);\n          }\n        } // Update the pane's DOM node style and class\n\n\n        this.setStyle(this.props);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removePane();\n    }\n  }, {\n    key: \"createPane\",\n    value: function createPane(props) {\n      var map = props.leaflet.map;\n      var name = props.name || \"pane-\".concat(uniqueId());\n\n      if (map != null && map.createPane != null) {\n        var isDefault = isLeafletPane(name);\n        var existing = isDefault || this.getPane(name);\n\n        if (existing == null) {\n          map.createPane(name, this.getParentPane());\n        } else {\n          var message = isDefault ? \"You must use a unique name for a pane that is not a default leaflet pane (\".concat(name, \")\") : \"A pane with this name already exists. (\".concat(name, \")\");\n          warning(false, message);\n        }\n\n        this.setState({\n          name: name,\n          context: _objectSpread({}, props.leaflet, {\n            pane: name\n          })\n        }, this.setStyle);\n      }\n    }\n  }, {\n    key: \"removePane\",\n    value: function removePane() {\n      // Remove the created pane\n      var name = this.state.name;\n\n      if (name != null) {\n        var pane = this.getPane(name);\n        if (pane != null && pane.remove) pane.remove();\n        var map = this.props.leaflet.map;\n\n        if (map != null && map._panes != null) {\n          map._panes = omit(map._panes, name);\n          map._paneRenderers = omit(map._paneRenderers, name);\n        }\n      }\n    }\n  }, {\n    key: \"getParentPane\",\n    value: function getParentPane() {\n      return this.getPane(this.props.pane || this.props.leaflet.pane);\n    }\n  }, {\n    key: \"getPane\",\n    value: function getPane(name) {\n      if (name != null && this.props.leaflet.map != null) {\n        return this.props.leaflet.map.getPane(name);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var context = this.state.context;\n      return context ? React.createElement(LeafletProvider, {\n        value: context,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: paneStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, this.props.children)) : null;\n    }\n  }]);\n\n  return Pane;\n}(Component);\n\nexport default withLeaflet(Pane);","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/leaflet/src/Pane.js"],"names":["React","Component","warning","LeafletProvider","withLeaflet","addClassName","removeClassName","omit","idCounter","uniqueId","LEAFLET_PANES","PANE_RE","isLeafletPane","name","indexOf","replace","paneStyles","position","top","right","bottom","left","Pane","state","undefined","context","setStyle","props","style","className","pane","getPane","Object","keys","forEach","key","createPane","prevProps","removePane","map","leaflet","isDefault","existing","getParentPane","message","setState","remove","_panes","_paneRenderers","children"],"mappings":"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","sourcesContent":["// @flow\n// flowlint sketchy-null-string:off\n\nimport React, { Component, type Node } from 'react'\nimport warning from 'warning'\n\nimport { LeafletProvider, withLeaflet } from './context'\nimport type { LeafletContext } from './types'\nimport { addClassName, removeClassName } from './utils/updateClassName'\nimport omit from './utils/omit'\n\nlet idCounter = 0\nconst uniqueId = () => ++idCounter\n\nconst LEAFLET_PANES = [\n  'tile',\n  'shadow',\n  'overlay',\n  'map',\n  'marker',\n  'tooltip',\n  'popup',\n]\n\nconst PANE_RE = /-*pane/gi\n\nconst isLeafletPane = (name: string): boolean => {\n  return LEAFLET_PANES.indexOf(name.replace(PANE_RE, '')) !== -1\n}\n\nconst paneStyles = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n}\n\ntype Props = {\n  children: Node,\n  className?: string,\n  leaflet: LeafletContext,\n  name?: string,\n  pane?: string,\n  style?: Object,\n}\n\ntype State = {\n  name: ?string,\n  context: ?LeafletContext,\n}\n\nclass Pane extends Component<Props, State> {\n  state = {\n    name: undefined,\n    context: undefined,\n  }\n\n  componentDidMount() {\n    this.createPane(this.props)\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!this.state.name) {\n      // Do nothing if this.state.name is undefined due to errors or\n      // an invalid props.name value\n      return\n    }\n\n    // If the 'name' prop has changed the current pane is unmounted and a new\n    // pane is created.\n    if (this.props.name !== prevProps.name) {\n      this.removePane()\n      this.createPane(this.props)\n    } else {\n      // Remove the previous css class name from the pane if it has changed.\n      // setStyle() will take care of adding in the updated className\n      if (prevProps.className && this.props.className !== prevProps.className) {\n        const pane = this.getPane(this.state.name)\n        if (pane != null && prevProps.className != null) {\n          removeClassName(pane, prevProps.className)\n        }\n      }\n\n      // Update the pane's DOM node style and class\n      this.setStyle(this.props)\n    }\n  }\n\n  componentWillUnmount() {\n    this.removePane()\n  }\n\n  createPane(props: Props) {\n    const { map } = props.leaflet\n    const name = props.name || `pane-${uniqueId()}`\n\n    if (map != null && map.createPane != null) {\n      const isDefault = isLeafletPane(name)\n      const existing = isDefault || this.getPane(name)\n\n      if (existing == null) {\n        map.createPane(name, this.getParentPane())\n      } else {\n        const message = isDefault\n          ? `You must use a unique name for a pane that is not a default leaflet pane (${name})`\n          : `A pane with this name already exists. (${name})`\n        warning(false, message)\n      }\n\n      this.setState(\n        { name, context: { ...props.leaflet, pane: name } },\n        this.setStyle,\n      )\n    }\n  }\n\n  removePane() {\n    // Remove the created pane\n    const { name } = this.state\n    if (name != null) {\n      const pane = this.getPane(name)\n      if (pane != null && pane.remove) pane.remove()\n\n      const { map } = this.props.leaflet\n      if (map != null && map._panes != null) {\n        map._panes = omit(map._panes, name)\n        map._paneRenderers = omit(map._paneRenderers, name)\n      }\n    }\n  }\n\n  setStyle = ({ style, className }: Props = this.props) => {\n    const pane = this.getPane(this.state.name)\n    if (pane) {\n      if (className) {\n        addClassName(pane, className)\n      }\n      if (style) {\n        // Without the cast, Flow throws this error:\n        //   Cannot assign style[key] to pane.style[key] because string\n        //   is incompatible with number.\n        Object.keys(style).forEach((key: any) => {\n          pane.style[key] = style[key]\n        })\n      }\n    }\n  }\n\n  getParentPane(): ?HTMLElement {\n    return this.getPane(this.props.pane || this.props.leaflet.pane)\n  }\n\n  getPane(name: ?string): ?HTMLElement {\n    if (name != null && this.props.leaflet.map != null) {\n      return this.props.leaflet.map.getPane(name)\n    }\n  }\n\n  render() {\n    const { context } = this.state\n    return context ? (\n      <LeafletProvider value={context}>\n        <div style={paneStyles}>{this.props.children}</div>\n      </LeafletProvider>\n    ) : null\n  }\n}\n\nexport default withLeaflet<Props, Pane>(Pane)\n"]},"metadata":{},"sourceType":"module"}