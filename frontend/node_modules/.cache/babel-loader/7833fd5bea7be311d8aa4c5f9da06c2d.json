{"ast":null,"code":"var _jsxFileName = \"/home/pul/Projects/hab-hub/frontend/src/leaflet/map_advisory.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { FeatureGroup, LayerGroup, LayersControl, Map, Marker, Popup, TileLayer } from 'react-leaflet';\nimport { popupContent, popupHead, popupText } from \"./popupStyle\";\nimport { redMarker, blueMarker } from \"./mapMarker\"; //Change value for localhost or development server\n//Localhost\n\nconst URL = 'localhost'; //Biome Server\n//const URL = '10.199.20.25';\n\nexport default class MapAdvisory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: [12.599512, 121.984222],\n      zoom: 5,\n      station: []\n    };\n  }\n\n  componentDidMount() {\n    this.loadStation();\n    /*this.interval = setInterval(this.loadStation(), 3000);*/\n  }\n\n  async loadStation() {\n    /*NOTE:when deploying from remote server, always set url to that of remote url \r\n    so axios will get values from remote and not from localhost*/\n\n    /*await axios.get(\"http://10.199.20.25:8000/api/station/\")*/\n    // for Ubuntu-001\n    await axios.get('http://' + URL + ':8000/api/station/') // for localhost\n    .then(res => {\n      const station = res.data;\n      this.setState({\n        station\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.station !== this.props.station) {\n      this.timer = setTimeout(this.loadStation(), 3000);\n    }\n    /*this.timer = setTimeout(this.loadStation(), 3000);*/\n\n    /*setTimeout(this.loadStation(), 3000);*/\n\n    /*this.interval = setInterval(this.loadStation(), 3000);*/\n\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    const station = this.state.station;\n    return React.createElement(Map, {\n      className: \"leaflet_advisory_map\",\n      center: this.state.center,\n      zoom: this.state.zoom,\n      scrollWheelZoom: \"false\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(LayersControl, {\n      position: \"topright\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(LayersControl.BaseLayer, {\n      name: \"ESRI World Imagery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(LayersControl.BaseLayer, {\n      checked: true,\n      name: \"ESRI World Street Map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      attribution: \"Tiles \\xA9 Esri \\u2014 Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012\",\n      url: \"http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(LayersControl.Overlay, {\n      checked: true,\n      name: \"HAB Advisory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, station.map((station, i) => {\n      return React.createElement(FeatureGroup, {\n        name: station.station_name,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Marker, {\n        position: {\n          lat: station.latitude,\n          lng: station.longitude\n        },\n        icon: station.has_hab ? redMarker : blueMarker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Popup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: popupContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: popupHead,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, station.station_name), React.createElement(\"div\", {\n        style: popupText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Location:\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, station.longitude, \", \", station.latitude)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Last Updated:\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, station.timestamp)))))))));\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/home/pul/Projects/hab-hub/frontend/src/leaflet/map_advisory.js"],"names":["React","axios","FeatureGroup","LayerGroup","LayersControl","Map","Marker","Popup","TileLayer","popupContent","popupHead","popupText","redMarker","blueMarker","URL","MapAdvisory","Component","constructor","props","state","center","zoom","station","componentDidMount","loadStation","get","then","res","data","setState","catch","error","console","log","componentDidUpdate","prevProps","prevState","timer","setTimeout","componentWillUnmount","clearInterval","interval","clearTimeout","render","map","i","station_name","lat","latitude","lng","longitude","has_hab","timestamp"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  FeatureGroup,\r\n  LayerGroup,\r\n  LayersControl,\r\n  Map,\r\n  Marker,\r\n  Popup,\r\n  TileLayer,\r\n} from 'react-leaflet'\r\n\r\nimport { popupContent, popupHead, popupText } from \"./popupStyle\";\r\nimport { redMarker, blueMarker } from \"./mapMarker\";\r\n\r\n//Change value for localhost or development server\r\n//Localhost\r\nconst URL = 'localhost';\r\n//Biome Server\r\n//const URL = '10.199.20.25';\r\n\r\nexport default class MapAdvisory extends React.Component<{}, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      center: [12.599512, 121.984222],\r\n      zoom: 5,\r\n      station: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadStation();\r\n    /*this.interval = setInterval(this.loadStation(), 3000);*/\r\n  }\r\n\r\n  async loadStation() {\r\n    /*NOTE:when deploying from remote server, always set url to that of remote url \r\n    so axios will get values from remote and not from localhost*/\r\n    /*await axios.get(\"http://10.199.20.25:8000/api/station/\")*/        // for Ubuntu-001\r\n    await axios.get('http://'+URL+':8000/api/station/')      // for localhost\r\n      .then(res => {\r\n        const station = res.data;\r\n        this.setState({ station });\r\n      })\r\n      .catch(function (error) {\r\n      console.log(error);\r\n      })\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n    if (prevProps.station !== this.props.station) {\r\n      this.timer = setTimeout(this.loadStation(), 3000);\r\n    }\r\n\r\n    /*this.timer = setTimeout(this.loadStation(), 3000);*/\r\n    /*setTimeout(this.loadStation(), 3000);*/\r\n    /*this.interval = setInterval(this.loadStation(), 3000);*/\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n    clearTimeout(this.timer);\r\n  }\r\n\r\n  render() {\r\n    const {station} = this.state;\r\n\r\n    return (\r\n      <Map className=\"leaflet_advisory_map\" center={this.state.center} zoom={this.state.zoom} scrollWheelZoom=\"false\">\r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"ESRI World Imagery\">\r\n            <TileLayer\r\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\r\n            />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer checked name=\"ESRI World Street Map\">\r\n            <TileLayer\r\n              attribution='Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'\r\n              url=\"http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n            />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay checked name=\"HAB Advisory\">\r\n            <LayerGroup>\r\n              {station.map((station, i) => {\r\n                return( \r\n                  <FeatureGroup name={station.station_name} key={i}>\r\n                    <Marker\r\n                      position={{lat:station.latitude, lng:station.longitude}}\r\n                      icon={station.has_hab ? redMarker : blueMarker}>\r\n                      <Popup>\r\n                        <div style={popupContent}>\r\n                          <div style={popupHead}>\r\n                            {station.station_name}\r\n                          </div>\r\n                          <div style={popupText}>\r\n                          <table>\r\n                            <tbody>\r\n                              <tr>\r\n                                <td>Location:</td>\r\n                                <td>{station.longitude}, {station.latitude}</td> \r\n                              </tr>\r\n                              <tr>\r\n                                <td>Last Updated:</td>\r\n                                <td>{station.timestamp}</td> \r\n                              </tr>\r\n                              </tbody>\r\n                          </table>\r\n                          </div>\r\n                        </div>\r\n                      </Popup>\r\n                    </Marker>\r\n                  </FeatureGroup>\r\n                )\r\n              })}\r\n            </LayerGroup>\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}