{"ast":null,"code":"var _jsxFileName = \"/home/pul/Projects/hab-hub/frontend/hab_ews/src/ReactSimpleMap/ReactSimpleMap.react.js\";\nimport * as React from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from \"react-simple-maps\";\nimport data from \"./data/world-50m.json\";\nimport { scaleLinear } from \"d3-scale\";\nconst wrapperStyles = {\n  width: \"100%\",\n  height: \"auto\",\n  maxWidth: \"100%\",\n  margin: \"0 auto\",\n  fontFamily: \"Roboto, sans-serif\"\n};\nconst popScale = scaleLinear().domain([0, 100000000, 1400000000]).range([\"#CFD8DC\", \"#607D8B\", \"#37474F\"]);\n\nclass ReactSimpleMap extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      origin: {\n        x: 0,\n        y: 0\n      },\n      content: \"\"\n    };\n\n    this.handleMove = (geography, evt) => {\n      const x = evt.clientX;\n      const y = evt.clientY + window.pageYOffset;\n      this.setState({\n        origin: {\n          x,\n          y\n        },\n        content: geography.properties.name + \": \" + geography.properties.pop_est\n      });\n    };\n\n    this.handleLeave = () => {\n      this.setState({\n        content: \"\"\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: wrapperStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, this.state.content && React.createElement(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: this.state.origin.y + 20 - window.scrollY,\n        left: this.state.origin.x,\n        zIndex: 999999,\n        textAlign: \"center\",\n        border: \"1px grey solid\",\n        borderRadius: 3,\n        padding: 4,\n        backgroundColor: \"#fff\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, this.state.content), React.createElement(ComposableMap, {\n      projectionConfig: {\n        scale: 205,\n        rotation: [-11, 0, 0]\n      },\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      },\n      width: 900,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(ZoomableGroup, {\n      center: [0, 20],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Geographies, {\n      geography: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, (geographies, projection) => geographies.map((geography, i) => React.createElement(Geography, {\n      key: i,\n      geography: geography,\n      projection: projection,\n      onMouseMove: this.handleMove,\n      onMouseLeave: this.handleLeave,\n      style: {\n        default: {\n          fill: popScale(geography.properties.pop_est),\n          stroke: \"#607D8B\",\n          strokeWidth: 0.75,\n          outline: \"none\"\n        },\n        hover: {\n          fill: \"#263238\",\n          stroke: \"#607D8B\",\n          strokeWidth: 0.75,\n          outline: \"none\"\n        },\n        pressed: {\n          fill: \"#263238\",\n          stroke: \"#607D8B\",\n          strokeWidth: 0.75,\n          outline: \"none\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default ReactSimpleMap;","map":{"version":3,"sources":["/home/pul/Projects/hab-hub/frontend/hab_ews/src/ReactSimpleMap/ReactSimpleMap.react.js"],"names":["React","ComposableMap","ZoomableGroup","Geographies","Geography","data","scaleLinear","wrapperStyles","width","height","maxWidth","margin","fontFamily","popScale","domain","range","ReactSimpleMap","PureComponent","state","origin","x","y","content","handleMove","geography","evt","clientX","clientY","window","pageYOffset","setState","properties","name","pop_est","handleLeave","render","position","top","scrollY","left","zIndex","textAlign","border","borderRadius","padding","backgroundColor","scale","rotation","geographies","projection","map","i","default","fill","stroke","strokeWidth","outline","hover","pressed"],"mappings":";AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,SAJF,QAKO,mBALP;AAMA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE,MADa;AAEpBC,EAAAA,MAAM,EAAE,MAFY;AAGpBC,EAAAA,QAAQ,EAAE,MAHU;AAIpBC,EAAAA,MAAM,EAAE,QAJY;AAKpBC,EAAAA,UAAU,EAAE;AALQ,CAAtB;AAaA,MAAMC,QAAQ,GAAGP,WAAW,GACzBQ,MADc,CACP,CAAC,CAAD,EAAI,SAAJ,EAAe,UAAf,CADO,EAEdC,KAFc,CAER,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAFQ,CAAjB;;AAIA,MAAMC,cAAN,SAA6BhB,KAAK,CAACiB,aAAnC,CAA8D;AAAA;AAAA;AAAA,SAC5DC,KAD4D,GACpD;AACNC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OADF;AAENC,MAAAA,OAAO,EAAE;AAFH,KADoD;;AAAA,SAM5DC,UAN4D,GAM/C,CACXC,SADW,EAEXC,GAFW,KAGF;AACT,YAAML,CAAC,GAAGK,GAAG,CAACC,OAAd;AACA,YAAML,CAAC,GAAGI,GAAG,CAACE,OAAJ,GAAcC,MAAM,CAACC,WAA/B;AACA,WAAKC,QAAL,CAAc;AACZX,QAAAA,MAAM,EAAE;AAAEC,UAAAA,CAAF;AAAKC,UAAAA;AAAL,SADI;AAEZC,QAAAA,OAAO,EAAEE,SAAS,CAACO,UAAV,CAAqBC,IAArB,GAA4B,IAA5B,GAAmCR,SAAS,CAACO,UAAV,CAAqBE;AAFrD,OAAd;AAID,KAhB2D;;AAAA,SAkB5DC,WAlB4D,GAkB9C,MAAY;AACxB,WAAKJ,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KApB2D;AAAA;;AAsB5Da,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAE5B,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKW,KAAL,CAAWI,OAAX,IACC;AACE,MAAA,KAAK,EAAE;AACLc,QAAAA,QAAQ,EAAE,OADL;AAELC,QAAAA,GAAG,EAAE,KAAKnB,KAAL,CAAWC,MAAX,CAAkBE,CAAlB,GAAsB,EAAtB,GAA2BO,MAAM,CAACU,OAFlC;AAGLC,QAAAA,IAAI,EAAE,KAAKrB,KAAL,CAAWC,MAAX,CAAkBC,CAHnB;AAILoB,QAAAA,MAAM,EAAE,MAJH;AAKLC,QAAAA,SAAS,EAAE,QALN;AAMLC,QAAAA,MAAM,EAAE,gBANH;AAOLC,QAAAA,YAAY,EAAE,CAPT;AAQLC,QAAAA,OAAO,EAAE,CARJ;AASLC,QAAAA,eAAe,EAAE;AATZ,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaG,KAAK3B,KAAL,CAAWI,OAbd,CAFJ,EAkBE,oBAAC,aAAD;AACE,MAAA,gBAAgB,EAAE;AAChBwB,QAAAA,KAAK,EAAE,GADS;AAEhBC,QAAAA,QAAQ,EAAE,CAAC,CAAC,EAAF,EAAM,CAAN,EAAS,CAAT;AAFM,OADpB;AAKE,MAAA,KAAK,EAAE;AACLvC,QAAAA,KAAK,EAAE,MADF;AAELC,QAAAA,MAAM,EAAE;AAFH,OALT;AASE,MAAA,KAAK,EAAE,GATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWE,oBAAC,aAAD;AAAe,MAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAEJ,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC2C,WAAD,EAAcC,UAAd,KACCD,WAAW,CAACE,GAAZ,CAAgB,CAAC1B,SAAD,EAAY2B,CAAZ,KACd,oBAAC,SAAD;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,SAAS,EAAE3B,SAFb;AAGE,MAAA,UAAU,EAAEyB,UAHd;AAIE,MAAA,WAAW,EAAE,KAAK1B,UAJpB;AAKE,MAAA,YAAY,EAAE,KAAKW,WALrB;AAME,MAAA,KAAK,EAAE;AACLkB,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAExC,QAAQ,CAACW,SAAS,CAACO,UAAV,CAAqBE,OAAtB,CADP;AAEPqB,UAAAA,MAAM,EAAE,SAFD;AAGPC,UAAAA,WAAW,EAAE,IAHN;AAIPC,UAAAA,OAAO,EAAE;AAJF,SADJ;AAOLC,QAAAA,KAAK,EAAE;AACLJ,UAAAA,IAAI,EAAE,SADD;AAELC,UAAAA,MAAM,EAAE,SAFH;AAGLC,UAAAA,WAAW,EAAE,IAHR;AAILC,UAAAA,OAAO,EAAE;AAJJ,SAPF;AAaLE,QAAAA,OAAO,EAAE;AACPL,UAAAA,IAAI,EAAE,SADC;AAEPC,UAAAA,MAAM,EAAE,SAFD;AAGPC,UAAAA,WAAW,EAAE,IAHN;AAIPC,UAAAA,OAAO,EAAE;AAJF;AAbJ,OANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFJ,CADF,CAXF,CAlBF,CADF;AAoED;;AA3F2D;;AA8F9D,eAAexC,cAAf","sourcesContent":["// @flow\n\nimport * as React from \"react\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\";\nimport data from \"./data/world-50m.json\";\nimport { scaleLinear } from \"d3-scale\";\n\nconst wrapperStyles = {\n  width: \"100%\",\n  height: \"auto\",\n  maxWidth: \"100%\",\n  margin: \"0 auto\",\n  fontFamily: \"Roboto, sans-serif\",\n};\n\ntype State = {\n  origin: { x: number, y: number },\n  content: string,\n};\n\nconst popScale = scaleLinear()\n  .domain([0, 100000000, 1400000000])\n  .range([\"#CFD8DC\", \"#607D8B\", \"#37474F\"]);\n\nclass ReactSimpleMap extends React.PureComponent<void, State> {\n  state = {\n    origin: { x: 0, y: 0 },\n    content: \"\",\n  };\n\n  handleMove = (\n    geography: { properties: { name: string, pop_est: string } },\n    evt: SyntheticMouseEvent<>\n  ): void => {\n    const x = evt.clientX;\n    const y = evt.clientY + window.pageYOffset;\n    this.setState({\n      origin: { x, y },\n      content: geography.properties.name + \": \" + geography.properties.pop_est,\n    });\n  };\n\n  handleLeave = (): void => {\n    this.setState({ content: \"\" });\n  };\n\n  render() {\n    return (\n      <div style={wrapperStyles}>\n        {this.state.content && (\n          <div\n            style={{\n              position: \"fixed\",\n              top: this.state.origin.y + 20 - window.scrollY,\n              left: this.state.origin.x,\n              zIndex: 999999,\n              textAlign: \"center\",\n              border: \"1px grey solid\",\n              borderRadius: 3,\n              padding: 4,\n              backgroundColor: \"#fff\",\n            }}\n          >\n            {this.state.content}\n          </div>\n        )}\n        <ComposableMap\n          projectionConfig={{\n            scale: 205,\n            rotation: [-11, 0, 0],\n          }}\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n          }}\n          width={900}\n        >\n          <ZoomableGroup center={[0, 20]}>\n            <Geographies geography={data}>\n              {(geographies, projection) =>\n                geographies.map((geography, i) => (\n                  <Geography\n                    key={i}\n                    geography={geography}\n                    projection={projection}\n                    onMouseMove={this.handleMove}\n                    onMouseLeave={this.handleLeave}\n                    style={{\n                      default: {\n                        fill: popScale(geography.properties.pop_est),\n                        stroke: \"#607D8B\",\n                        strokeWidth: 0.75,\n                        outline: \"none\",\n                      },\n                      hover: {\n                        fill: \"#263238\",\n                        stroke: \"#607D8B\",\n                        strokeWidth: 0.75,\n                        outline: \"none\",\n                      },\n                      pressed: {\n                        fill: \"#263238\",\n                        stroke: \"#607D8B\",\n                        strokeWidth: 0.75,\n                        outline: \"none\",\n                      },\n                    }}\n                  />\n                ))\n              }\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    );\n  }\n}\n\nexport default ReactSimpleMap;\n"]},"metadata":{},"sourceType":"module"}