{"ast":null,"code":"import _objectSpread from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { ImageOverlay as LeafletImageOverlay, latLngBounds } from 'leaflet';\nimport { withLeaflet } from './context';\nimport MapLayer from './MapLayer';\n\nvar ImageOverlay =\n/*#__PURE__*/\nfunction (_MapLayer) {\n  _inherits(ImageOverlay, _MapLayer);\n\n  function ImageOverlay() {\n    _classCallCheck(this, ImageOverlay);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageOverlay).apply(this, arguments));\n  }\n\n  _createClass(ImageOverlay, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      var el = new LeafletImageOverlay(props.url, props.bounds, this.getOptions(props));\n      this.contextValue = _objectSpread({}, props.leaflet, {\n        popupContainer: el\n      });\n      return el;\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(fromProps, toProps) {\n      if (toProps.url !== fromProps.url) {\n        this.leafletElement.setUrl(toProps.url);\n      }\n\n      if (toProps.bounds !== fromProps.bounds) {\n        this.leafletElement.setBounds(latLngBounds(toProps.bounds));\n      }\n\n      if (toProps.opacity !== fromProps.opacity) {\n        this.leafletElement.setOpacity(toProps.opacity);\n      }\n\n      if (toProps.zIndex !== fromProps.zIndex) {\n        this.leafletElement.setZIndex(toProps.zIndex);\n      }\n    }\n  }]);\n\n  return ImageOverlay;\n}(MapLayer);\n\nexport default withLeaflet(ImageOverlay);","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/leaflet/src/ImageOverlay.js"],"names":["ImageOverlay","LeafletImageOverlay","latLngBounds","withLeaflet","MapLayer","props","el","url","bounds","getOptions","contextValue","leaflet","popupContainer","fromProps","toProps","leafletElement","setUrl","setBounds","opacity","setOpacity","zIndex","setZIndex"],"mappings":";;;;;;AAEA,SAASA,YAAY,IAAIC,mBAAzB,EAA8CC,YAA9C,QAAkE,SAAlE;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;;IAYMJ,Y;;;;;;;;;;;;;yCACiBK,K,EAA8B;AACjD,UAAMC,EAAE,GAAG,IAAIL,mBAAJ,CACTI,KAAK,CAACE,GADG,EAETF,KAAK,CAACG,MAFG,EAGT,KAAKC,UAAL,CAAgBJ,KAAhB,CAHS,CAAX;AAKA,WAAKK,YAAL,qBAAyBL,KAAK,CAACM,OAA/B;AAAwCC,QAAAA,cAAc,EAAEN;AAAxD;AACA,aAAOA,EAAP;AACD;;;yCAEoBO,S,EAAkBC,O,EAAgB;AACrD,UAAIA,OAAO,CAACP,GAAR,KAAgBM,SAAS,CAACN,GAA9B,EAAmC;AACjC,aAAKQ,cAAL,CAAoBC,MAApB,CAA2BF,OAAO,CAACP,GAAnC;AACD;;AACD,UAAIO,OAAO,CAACN,MAAR,KAAmBK,SAAS,CAACL,MAAjC,EAAyC;AACvC,aAAKO,cAAL,CAAoBE,SAApB,CAA8Bf,YAAY,CAACY,OAAO,CAACN,MAAT,CAA1C;AACD;;AACD,UAAIM,OAAO,CAACI,OAAR,KAAoBL,SAAS,CAACK,OAAlC,EAA2C;AACzC,aAAKH,cAAL,CAAoBI,UAApB,CAA+BL,OAAO,CAACI,OAAvC;AACD;;AACD,UAAIJ,OAAO,CAACM,MAAR,KAAmBP,SAAS,CAACO,MAAjC,EAAyC;AACvC,aAAKL,cAAL,CAAoBM,SAApB,CAA8BP,OAAO,CAACM,MAAtC;AACD;AACF;;;;EAxBwBhB,Q;;AA2B3B,eAAeD,WAAW,CAAsBH,YAAtB,CAA1B","sourcesContent":["// @flow\n\nimport { ImageOverlay as LeafletImageOverlay, latLngBounds } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport MapLayer from './MapLayer'\nimport type { LatLngBounds, MapLayerProps } from './types'\n\ntype LeafletElement = LeafletImageOverlay\ntype Props = {\n  attribution?: string,\n  bounds?: LatLngBounds,\n  opacity?: number,\n  url: string | HTMLImageElement,\n  zIndex?: number,\n} & MapLayerProps\n\nclass ImageOverlay extends MapLayer<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    const el = new LeafletImageOverlay(\n      props.url,\n      props.bounds,\n      this.getOptions(props),\n    )\n    this.contextValue = { ...props.leaflet, popupContainer: el }\n    return el\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.url !== fromProps.url) {\n      this.leafletElement.setUrl(toProps.url)\n    }\n    if (toProps.bounds !== fromProps.bounds) {\n      this.leafletElement.setBounds(latLngBounds(toProps.bounds))\n    }\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity)\n    }\n    if (toProps.zIndex !== fromProps.zIndex) {\n      this.leafletElement.setZIndex(toProps.zIndex)\n    }\n  }\n}\n\nexport default withLeaflet<Props, ImageOverlay>(ImageOverlay)\n"]},"metadata":{},"sourceType":"module"}