{"ast":null,"code":"var _jsxFileName = \"/home/pul/Projects/hab-hub/frontend/hab_ews/src/components/timeseries.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official'; // Load Highcharts modules\n\nrequire('highcharts/modules/exporting')(Highcharts);\n/*  NOTE: When deploying from remote server, always set url to that\r\n *  of remote url so axios will get values from remote and not from localhost.\r\n *  Change value for localhost or development server\r\n */\n// Localhost\n//const URL = 'localhost';\n// Biome Server\n\n\nconst URL = '10.199.20.25';\nexport default class Timeseries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      label: ''\n    };\n  }\n  /*shouldComponentUpdate(nextProps, nextState){\r\n  \tconst differentId = this.props.id !== nextProps.id;\r\n  \tconst differentLabel = this.state.label !== nextState.label;\r\n  \treturn (differentId || differentLabel);\r\n   }\r\n  */\n\n  /*componentDidUpdate(prevProps) {\r\n  // Typical usage (don't forget to compare props):\r\n  if (this.props.id !== prevProps.id) {\r\n    this.fetchData(this.props.id);\r\n  }\r\n  }*/\n\n\n  async componentDidMount() {\n    let res = await axios.get('http://' + URL + ':8000/api/sensor/?ordering=time', {\n      params: {\n        station_name: JSON.stringify(this.props.id)\n      }\n    });\n    let data = res.data;\n\n    if (this.props.timeseries === 'temp') {\n      this.setState({\n        label: 'Temperature'\n      });\n      data = data.map(el => [el[0] = (Number(el.unixtime) + 3600 * 16) * 1000,\n      /*Add 16 hours to adjust unix time to local timezone GMT+8*/\n      el[1] = Number(el.temp)]);\n    } else if (this.props.timeseries === 'salinity') {\n      this.setState({\n        label: 'Salinity'\n      });\n      data = data.map(el => [el[0] = (Number(el.unixtime) + 3600 * 16) * 1000,\n      /*Add 16 hours to adjust unix time to local timezone GMT+8*/\n      el[1] = Number(el.salinity)]);\n    } else if (this.props.timeseries === 'turbidity') {\n      this.setState({\n        label: 'Turbidity'\n      });\n      data = data.map(el => [el[0] = (Number(el.unixtime) + 3600 * 16) * 1000,\n      /*Add 16 hours to adjust unix time to local timezone GMT+8*/\n      el[1] = Number(el.turbidity)]);\n    } else if (this.props.timeseries === 'ph') {\n      this.setState({\n        label: 'pH'\n      });\n      data = data.map(el => [el[0] = (Number(el.unixtime) + 3600 * 16) * 1000,\n      /*Add 16 hours to adjust unix time to local timezone GMT+8*/\n      el[1] = Number(el.ph)]);\n    } else if (this.props.timeseries === 'chl_a') {\n      this.setState({\n        label: 'Chlorophyll-A'\n      });\n      data = data.map(el => [el[0] = (Number(el.unixtime) + 3600 * 16) * 1000,\n      /*Add 16 hours to adjust unix time to local timezone GMT+8*/\n      el[1] = Number(el.chl_a)]);\n    } else {\n      this.setState({\n        label: 'Dissolved Oxygen'\n      });\n      data = data.map(el => [el[0] = (Number(el.unixtime) + 3600 * 16) * 1000,\n      /*Add 16 hours to adjust unix time to local timezone GMT+8*/\n      el[1] = Number(el.uv)]);\n    }\n\n    this.setState({\n      data\n    });\n  }\n\n  render() {\n    const options = {\n      title: {\n        text: this.props.name\n      },\n      series: [{\n        name: this.state.label,\n        data: this.state.data,\n        tooltip: {\n          valueDecimals: 2\n        }\n      }],\n      chart: {\n        type: 'line'\n      }\n    };\n    return React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      constructorType: 'stockChart',\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/pul/Projects/hab-hub/frontend/hab_ews/src/components/timeseries.js"],"names":["React","Component","axios","Highcharts","HighchartsReact","require","URL","Timeseries","constructor","props","state","data","label","componentDidMount","res","get","params","station_name","JSON","stringify","id","timeseries","setState","map","el","Number","unixtime","temp","salinity","turbidity","ph","chl_a","uv","render","options","title","text","name","series","tooltip","valueDecimals","chart","type"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\n// Load Highcharts modules\r\nrequire('highcharts/modules/exporting')(Highcharts)\r\n\r\n/*  NOTE: When deploying from remote server, always set url to that\r\n *  of remote url so axios will get values from remote and not from localhost.\r\n *  Change value for localhost or development server\r\n */\r\n// Localhost\r\n//const URL = 'localhost';\r\n// Biome Server\r\nconst URL = '10.199.20.25';\r\n\r\nexport default class Timeseries extends Component {\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t  data : [],\r\n\t\t  label: ''\r\n   \t\t}\r\n\t}\r\n\r\n\t/*shouldComponentUpdate(nextProps, nextState){\r\n\t\tconst differentId = this.props.id !== nextProps.id;\r\n\t\tconst differentLabel = this.state.label !== nextState.label;\r\n\t\treturn (differentId || differentLabel);\r\n  }\r\n*/\r\n  /*componentDidUpdate(prevProps) {\r\n  // Typical usage (don't forget to compare props):\r\n  if (this.props.id !== prevProps.id) {\r\n    this.fetchData(this.props.id);\r\n  }\r\n}*/\r\n\r\n\tasync componentDidMount(){\r\n\t\tlet res = await axios.get('http://'+URL+':8000/api/sensor/?ordering=time', {\r\n\t\t\tparams: {\r\n\t\t\t\tstation_name: JSON.stringify(this.props.id)\r\n\t\t\t}\r\n\t\t});\r\n\t\tlet data = res.data;\r\n\t\tif (this.props.timeseries === 'temp') {\r\n\t\t\tthis.setState({label: 'Temperature'});\r\n\t\t\tdata = data.map(el => [\r\n\t\t\tel[0] = (Number(el.unixtime) + (3600*16))*1000, /*Add 16 hours to adjust unix time to local timezone GMT+8*/\r\n\t\t\tel[1] = Number(el.temp)\r\n\t\t\t]);\r\n\t\t} else if (this.props.timeseries === 'salinity') {\r\n\t\t\tthis.setState({label: 'Salinity'});\r\n\t\t\tdata = data.map(el => [\r\n\t\t\tel[0] = (Number(el.unixtime) + (3600*16))*1000, /*Add 16 hours to adjust unix time to local timezone GMT+8*/\r\n\t\t\tel[1] = Number(el.salinity)\r\n\t\t\t]);\r\n\t\t} else if (this.props.timeseries === 'turbidity') {\r\n\t\t\tthis.setState({label: 'Turbidity'});\r\n\t\t\tdata = data.map(el => [\r\n\t\t\tel[0] = (Number(el.unixtime) + (3600*16))*1000, /*Add 16 hours to adjust unix time to local timezone GMT+8*/\r\n\t\t\tel[1] = Number(el.turbidity)\r\n\t\t\t]);\r\n\t\t} else if (this.props.timeseries === 'ph') {\r\n\t\t\tthis.setState({label: 'pH'});\r\n\t\t\tdata = data.map(el => [\r\n\t\t\tel[0] = (Number(el.unixtime) + (3600*16))*1000, /*Add 16 hours to adjust unix time to local timezone GMT+8*/\r\n\t\t\tel[1] = Number(el.ph)\r\n\t\t\t]);\r\n\t\t} else if (this.props.timeseries === 'chl_a') {\r\n\t\t\tthis.setState({label: 'Chlorophyll-A'});\r\n\t\t\tdata = data.map(el => [\r\n\t\t\tel[0] = (Number(el.unixtime) + (3600*16))*1000, /*Add 16 hours to adjust unix time to local timezone GMT+8*/\r\n\t\t\tel[1] = Number(el.chl_a)\r\n\t\t\t]);\r\n\t\t} else {\r\n\t\t\tthis.setState({label: 'Dissolved Oxygen'});\r\n\t\t\tdata = data.map(el => [\r\n\t\t\tel[0] = (Number(el.unixtime) + (3600*16))*1000, /*Add 16 hours to adjust unix time to local timezone GMT+8*/\r\n\t\t\tel[1] = Number(el.uv)\r\n\t\t\t]);\r\n\t\t}\r\n\t\tthis.setState({data})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst options = {\r\n\t\t\ttitle: {\r\n\t\t\t\ttext: this.props.name\r\n\t\t\t},\r\n\t\t\tseries: [{\r\n\t\t\t\tname: this.state.label,\r\n\t\t\t\tdata: this.state.data,\r\n\t\t\t\ttooltip: {\r\n\t\t\t\t   valueDecimals: 2,\r\n\t\t\t\t}\r\n\t\t\t}],\r\n\t\t\tchart: {\r\n\t\t     type: 'line'\r\n\t\t  },\r\n\t\t};\r\n\r\n\t  return (\r\n    \t<HighchartsReact\r\n\t\t   highcharts={Highcharts}\r\n\t\t   constructorType={'stockChart'}\r\n\t\t   options={options} />\r\n\t  );\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}