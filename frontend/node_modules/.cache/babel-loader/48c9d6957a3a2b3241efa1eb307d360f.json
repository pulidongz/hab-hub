{"ast":null,"code":"import _classCallCheck from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pul/hab_ews/frontend/hab_ews/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Rectangle as LeafletRectangle } from 'leaflet';\nimport { withLeaflet } from './context';\nimport Path from './Path';\n\nvar Rectangle =\n/*#__PURE__*/\nfunction (_Path) {\n  _inherits(Rectangle, _Path);\n\n  function Rectangle() {\n    _classCallCheck(this, Rectangle);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Rectangle).apply(this, arguments));\n  }\n\n  _createClass(Rectangle, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      return new LeafletRectangle(props.bounds, this.getOptions(props));\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(fromProps, toProps) {\n      if (toProps.bounds !== fromProps.bounds) {\n        this.leafletElement.setBounds(toProps.bounds);\n      }\n\n      this.setStyleIfChanged(fromProps, toProps);\n    }\n  }]);\n\n  return Rectangle;\n}(Path);\n\nexport default withLeaflet(Rectangle);","map":{"version":3,"sources":["/home/pul/hab_ews/frontend/hab_ews/src/leaflet/src/Rectangle.js"],"names":["Rectangle","LeafletRectangle","withLeaflet","Path","props","bounds","getOptions","fromProps","toProps","leafletElement","setBounds","setStyleIfChanged"],"mappings":";;;;;AAEA,SAASA,SAAS,IAAIC,gBAAtB,QAA8C,SAA9C;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAMMH,S;;;;;;;;;;;;;yCACiBI,K,EAA8B;AACjD,aAAO,IAAIH,gBAAJ,CAAqBG,KAAK,CAACC,MAA3B,EAAmC,KAAKC,UAAL,CAAgBF,KAAhB,CAAnC,CAAP;AACD;;;yCAEoBG,S,EAAkBC,O,EAAgB;AACrD,UAAIA,OAAO,CAACH,MAAR,KAAmBE,SAAS,CAACF,MAAjC,EAAyC;AACvC,aAAKI,cAAL,CAAoBC,SAApB,CAA8BF,OAAO,CAACH,MAAtC;AACD;;AACD,WAAKM,iBAAL,CAAuBJ,SAAvB,EAAkCC,OAAlC;AACD;;;;EAVqBL,I;;AAaxB,eAAeD,WAAW,CAAmBF,SAAnB,CAA1B","sourcesContent":["// @flow\n\nimport { Rectangle as LeafletRectangle } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport Path from './Path'\nimport type { LatLngBounds, PathProps } from './types'\n\ntype LeafletElement = LeafletRectangle\ntype Props = { bounds: LatLngBounds } & PathProps\n\nclass Rectangle extends Path<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    return new LeafletRectangle(props.bounds, this.getOptions(props))\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.bounds !== fromProps.bounds) {\n      this.leafletElement.setBounds(toProps.bounds)\n    }\n    this.setStyleIfChanged(fromProps, toProps)\n  }\n}\n\nexport default withLeaflet<Props, Rectangle>(Rectangle)\n"]},"metadata":{},"sourceType":"module"}