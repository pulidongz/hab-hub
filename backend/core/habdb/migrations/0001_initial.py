# Generated by Django 2.1.5 on 2019-05-22 03:05

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Climate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weather_station_name', models.CharField(max_length=200)),
                ('province', models.CharField(max_length=200)),
                ('longitude', models.DecimalField(decimal_places=5, max_digits=10)),
                ('latitude', models.DecimalField(decimal_places=5, max_digits=10)),
                ('date', models.DateField()),
                ('rainfall', models.DecimalField(decimal_places=2, max_digits=10)),
                ('wind_speed', models.DecimalField(decimal_places=2, max_digits=10)),
                ('wind_direction', models.IntegerField()),
                ('temp_max', models.DecimalField(decimal_places=2, max_digits=4)),
                ('temp_min', models.DecimalField(decimal_places=2, max_digits=4)),
                ('temp_mean', models.DecimalField(decimal_places=2, max_digits=4)),
            ],
        ),
        migrations.CreateModel(
            name='HabData',
            fields=[
                ('sample_id', models.AutoField(primary_key=True, serialize=False)),
                ('source', models.CharField(help_text='Data source and/or author', max_length=200, verbose_name='Source')),
                ('date', models.DateField(auto_now=True)),
                ('time', models.DateTimeField(auto_now=True)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('cruise_id', models.CharField(blank=True, help_text='Cruise ID', max_length=50, null=True, verbose_name='Cruise ID')),
                ('station_depth', models.DecimalField(blank=True, decimal_places=5, help_text='Depth in Meters', max_digits=20, null=True, verbose_name='Station Depth')),
                ('latitude', models.DecimalField(decimal_places=10, default=0, max_digits=16, verbose_name='Latitude')),
                ('longitude', models.DecimalField(decimal_places=10, default=0, max_digits=16, verbose_name='Longitude')),
                ('sample_depth', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True, verbose_name='Sample Depth')),
                ('sample_num', models.CharField(help_text='Depth in meters', max_length=50, verbose_name='Sample Number')),
                ('bottom_depth', models.DecimalField(blank=True, decimal_places=5, help_text='Depth in meters', max_digits=20, null=True, verbose_name='Bottom Depth')),
                ('pressure', models.DecimalField(blank=True, decimal_places=5, help_text='units in Decibel(dB)', max_digits=20, null=True, verbose_name='Pressure')),
                ('temp', models.DecimalField(blank=True, decimal_places=5, help_text='units in Celcius (Â°C)', max_digits=20, null=True, verbose_name='Temperature')),
                ('ave_no2', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/L/uM', max_digits=20, null=True, verbose_name='Average Nitrite')),
                ('ave_no3', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/L/uM', max_digits=20, null=True, verbose_name='Average Nitrate')),
                ('ave_po4', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/L/uM', max_digits=20, null=True, verbose_name='Average Phosphate')),
                ('no2', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Nitrite')),
                ('no3', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Nitrate')),
                ('po4', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Phosphate')),
                ('ave_sio2', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/L/uM', max_digits=20, null=True, verbose_name='Average Silica')),
                ('ave_sio3', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/L/uM', max_digits=20, null=True, verbose_name='Average Silicate')),
                ('ave_sio4', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/L/uM', max_digits=20, null=True, verbose_name='Average Silicate')),
                ('sio2', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Silica')),
                ('sio3', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Silicate')),
                ('sio4', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Silicate')),
                ('nox', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Nitrate + Nitrite')),
                ('nh4', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Ammonia')),
                ('cdom', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Colored Dissolved Organic Matter')),
                ('chl_a', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Chlorophyll-A')),
                ('conductivity', models.DecimalField(blank=True, decimal_places=5, help_text='units in S/m', max_digits=20, null=True, verbose_name='Conductivity')),
                ('density', models.DecimalField(blank=True, decimal_places=5, help_text='units in kg/m^3', max_digits=20, null=True, verbose_name='Water Density')),
                ('do', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/L', max_digits=20, null=True, verbose_name='Dissolved Oxygen')),
                ('fluorescence', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Pigment Concentration')),
                ('n_p', models.DecimalField(blank=True, decimal_places=5, help_text='derived parameter; ration of N to P', max_digits=20, null=True, verbose_name='N_P')),
                ('p', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Total Phosphorous')),
                ('peroxide', models.DecimalField(blank=True, decimal_places=5, help_text='units in ___', max_digits=20, null=True, verbose_name='Peroxide')),
                ('tin', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Total Inorganic Nitrogen')),
                ('tss', models.DecimalField(blank=True, decimal_places=5, help_text='units in NTU or ppm', max_digits=20, null=True, verbose_name='Total Suspended Solids')),
                ('salinity', models.DecimalField(blank=True, decimal_places=5, help_text='parts per thousand or practical salinity units', max_digits=20, null=True, verbose_name='Salinity')),
                ('salinity_unit', models.CharField(blank=True, help_text='units in PPT or PSU', max_length=50, null=True, verbose_name='PPT or PSU')),
                ('group', models.CharField(blank=True, help_text='Diatom, Dinoflagellate, etc.', max_length=50, null=True, verbose_name='Plankton Group')),
                ('shellfish', models.CharField(blank=True, help_text='Shellfish Species', max_length=50, null=True, verbose_name='Shellfish Species')),
                ('species', models.CharField(blank=True, help_text='Plankton Species', max_length=50, null=True, verbose_name='Plankton Species')),
                ('plankton_sampling_method', models.CharField(blank=True, help_text='i.e. Niskin, Plankton Net, etc.', max_length=50, null=True, verbose_name='Plankton Sampling Method')),
                ('cell_count', models.DecimalField(blank=True, decimal_places=5, help_text='units in cell/L', max_digits=20, null=True, verbose_name='Plankton Abundance')),
                ('toxicity', models.DecimalField(blank=True, decimal_places=5, help_text='units in ug[toxin]/100g', max_digits=20, null=True, verbose_name='Shellfish Meat Toxicity')),
                ('toxicity_remarks', models.CharField(blank=True, help_text='Additional details about the toxicity data', max_length=200, null=True, verbose_name='Toxicty Remarks')),
                ('toxin', models.CharField(blank=True, help_text='units in STX', max_length=200, null=True, verbose_name='Toxin')),
                ('toxicity_method', models.CharField(blank=True, help_text='method used t obtain toxicity value', max_length=200, null=True, verbose_name='Toxicty Method')),
                ('turbidity', models.DecimalField(blank=True, decimal_places=5, help_text='units in mg/m^3', max_digits=20, null=True, verbose_name='Turbidity')),
                ('doc', models.DecimalField(blank=True, decimal_places=5, help_text='units in ___', max_digits=20, null=True, verbose_name='Dissolved Organic Carbon')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='MuniSocioData',
            fields=[
                ('muni_id', models.IntegerField(primary_key=True, serialize=False)),
                ('muni_name', models.CharField(max_length=200)),
                ('muni_or_city', models.CharField(blank=True, choices=[('MUNICIPALITY', 'Municipality'), ('CITY', 'City')], max_length=12, null=True)),
                ('coast_inld', models.CharField(blank=True, choices=[('COASTAL', 'Coastal'), ('INLAND', 'Inland')], max_length=7, null=True)),
                ('income_class', models.CharField(blank=True, choices=[('1st CLASS MUNICIPALITY', '1st Class Municipality'), ('2nd CLASS MUNICIPALITY', '2nd Class Municipality'), ('3rd CLASS MUNICIPALITY', '3rd Class Municipality'), ('4th CLASS MUNICIPALITY', '4th Class Municipality'), ('5th CLASS MUNICIPALITY', '5th Class Municipality'), ('6th CLASS MUNICIPALITY', '6th Class Municipality'), ('1st CLASS CITY', '1st Class City'), ('2nd CLASS CITY', '2nd Class City'), ('3rd CLASS CITY', '3rd Class City'), ('4th CLASS CITY', '4th Class City')], max_length=22, null=True)),
                ('num_brgy', models.IntegerField(blank=True, null=True)),
                ('area', models.IntegerField(blank=True, null=True)),
                ('pop_1990', models.IntegerField(blank=True, null=True)),
                ('pop_1995', models.IntegerField(blank=True, null=True)),
                ('pop_2000', models.IntegerField(blank=True, null=True)),
                ('pop_2007', models.IntegerField(blank=True, null=True)),
                ('pop_2010', models.IntegerField(blank=True, null=True)),
                ('pop_2015', models.IntegerField(blank=True, null=True)),
                ('anpopgrowth9015', models.DecimalField(blank=True, decimal_places=2, max_digits=11, null=True)),
                ('num_hhold', models.IntegerField(blank=True, null=True)),
                ('hhold_pop2010', models.IntegerField(blank=True, null=True)),
                ('hhold_pop0_14y', models.IntegerField(blank=True, null=True)),
                ('hhold_pop15_64y', models.IntegerField(blank=True, null=True)),
                ('hhold_pop_65above', models.IntegerField(blank=True, null=True)),
                ('hhold_pop_female', models.IntegerField(blank=True, null=True)),
                ('hhold_popf0_14y', models.IntegerField(blank=True, null=True)),
                ('hhold_popf15_64y', models.IntegerField(blank=True, null=True)),
                ('hhold_popf_65above', models.IntegerField(blank=True, null=True)),
                ('hhold_pop_male', models.IntegerField(blank=True, null=True)),
                ('hhold_popm0_14y', models.IntegerField(blank=True, null=True)),
                ('hhold_popm15_64y', models.IntegerField(blank=True, null=True)),
                ('hhold_popm_65above', models.IntegerField(blank=True, null=True)),
                ('sex_ratio_2010', models.IntegerField(blank=True, null=True)),
                ('dependency_2010', models.IntegerField(blank=True, null=True)),
                ('povinc_2003', models.IntegerField(blank=True, null=True)),
                ('povinc_2006', models.IntegerField(blank=True, null=True)),
                ('povinc_2009', models.IntegerField(blank=True, null=True)),
                ('povinc_2012', models.IntegerField(blank=True, null=True)),
                ('num_fisher', models.IntegerField(blank=True, null=True)),
                ('male_fisher', models.IntegerField(blank=True, null=True)),
                ('female_fisher', models.IntegerField(blank=True, null=True)),
                ('num_boats', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Plankton',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.CharField(max_length=200)),
                ('species', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlanktonSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_count', models.IntegerField()),
                ('method', models.CharField(max_length=200)),
                ('sample_number', models.CharField(blank=True, default=' ', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProvSocioData',
            fields=[
                ('prov_id', models.IntegerField(primary_key=True, serialize=False)),
                ('prov_name', models.CharField(max_length=200)),
                ('num_muni', models.IntegerField()),
                ('num_city', models.IntegerField()),
                ('num_brgy', models.IntegerField()),
                ('income_class', models.CharField(choices=[('1st CLASS PROVINCE', '1st Class Province'), ('2nd CLASS PROVINCE', '2nd Class Province'), ('3rd CLASS PROVINCE', '3rd Class Province'), ('4th CLASS PROVINCE', '4th Class Province'), ('5th CLASS PROVINCE', '5th Class Province')], max_length=22)),
                ('area', models.IntegerField(default=0)),
                ('longitude', models.DecimalField(decimal_places=10, default=0, max_digits=13)),
                ('latitude', models.DecimalField(decimal_places=10, default=0, max_digits=13)),
            ],
        ),
        migrations.CreateModel(
            name='RegionData',
            fields=[
                ('reg_id', models.IntegerField(primary_key=True, serialize=False)),
                ('reg_name', models.CharField(max_length=200)),
                ('longitude', models.DecimalField(decimal_places=10, default=0, max_digits=13)),
                ('latitude', models.DecimalField(decimal_places=10, default=0, max_digits=13)),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('sample_id', models.IntegerField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('depth', models.DecimalField(decimal_places=5, default=0, max_digits=20, null=True)),
                ('pressure', models.DecimalField(decimal_places=5, default=0, max_digits=20, null=True)),
                ('chl_a', models.DecimalField(decimal_places=5, default=0, max_digits=20, null=True)),
                ('NO2', models.DecimalField(decimal_places=5, default=0, max_digits=20, null=True)),
                ('NO3', models.DecimalField(decimal_places=5, default=0, max_digits=20, null=True)),
                ('NH3', models.DecimalField(decimal_places=5, default=0, max_digits=20, null=True)),
                ('NH4', models.DecimalField(decimal_places=5, default=0, max_digits=20, null=True)),
                ('PO4', models.DecimalField(decimal_places=5, default=0, max_digits=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_id', models.CharField(max_length=50)),
                ('date', models.DateField(auto_now=True)),
                ('time', models.DateTimeField(auto_now=True)),
                ('station_depth', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
                ('do', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
                ('temp', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
                ('salinity', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
                ('turbidity', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
                ('ph', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
                ('chl_a', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
                ('uv', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('station_name', models.CharField(max_length=100, unique=True)),
                ('longitude', models.DecimalField(decimal_places=10, max_digits=13)),
                ('latitude', models.DecimalField(decimal_places=10, max_digits=13)),
                ('station_depth', models.DecimalField(decimal_places=5, max_digits=10)),
            ],
        ),
        migrations.AddField(
            model_name='sensor',
            name='station_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='habdb.Station'),
        ),
        migrations.AddField(
            model_name='sample',
            name='station_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='habdb.Station'),
        ),
        migrations.AddField(
            model_name='provsociodata',
            name='reg_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='habdb.RegionData'),
        ),
        migrations.AddField(
            model_name='planktonsample',
            name='sample_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='habdb.Sample'),
        ),
        migrations.AddField(
            model_name='planktonsample',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='habdb.Plankton'),
        ),
        migrations.AddField(
            model_name='munisociodata',
            name='prov_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='habdb.ProvSocioData'),
        ),
        migrations.AddField(
            model_name='habdata',
            name='station_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='habdb.Station'),
        ),
    ]
